=================================
MongoDB\\Collection::mapReduce()
=================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. phpmethod:: MongoDB\\Collection::mapReduce()

   The :manual:`mapReduce </core/map-reduce>` command
   allows you to run map-reduce aggregation operations
   over a collection.

   .. code-block:: php

      function mapReduce($map, $reduce, $out, array $options = []) MongoDB\MapReduceResult

   This method has the following parameters:

   .. include:: /includes/apiargs/MongoDBCollection-method-mapReduce-param.rst

   The ``$options`` parameter supports the following options:

   .. include:: /includes/apiargs/MongoDBCollection-method-mapReduce-option.rst

Return Values
-------------

A :phpclass:`MongoDB\\MapReduceResult` object, which allows for iteration of mapReduce results
irrespective of the output method (e.g. inline, collection) via the IteratorAggregate interface.
It also provides access to command statistics.

Errors/Exceptions
-----------------

.. include:: /includes/extracts/error-unsupportedexception.rst
.. include:: /includes/extracts/error-invalidargumentexception.rst
.. include:: /includes/extracts/error-unexpectedvalueexception.rst
.. include:: /includes/extracts/error-driver-runtimeexception.rst

Behavior
--------

In MongoDB, the map-reduce operation can write results to a collection
or return the results inline. If you write map-reduce output to a
collection, you can perform subsequent map-reduce operations on the
same input collection that merge replace, merge, or reduce new results
with previous results. See :manual:`mapReduce </core/map-reduce>` and
:manual:`Perform Incremental Map-Reduce </tutorial/perform-incremental-map-reduce>` for details and
examples.

When returning the results of a map-reduce operation *inline*, the
result documents must be within the :limit:`BSON Document Size` limit,
which is currently 16 megabytes. For additional information on limits
and restrictions on map-reduce operations, see the
:manual:`mapReduce </reference/command/mapReduce>` reference page.

MongoDB supports map-reduce operations on :manual:`sharded collections
</sharding>`. Map-reduce operations can also output
the results to a sharded collection. See
:manual:`Map-Reduce and Sharded Collections </core/map-reduce-sharded-collections>`.

Example
-------
This example will get all users with at least one "sale" event and count the number of sales for each of these users.

.. code-block:: php

   <?php

   $operation = new CreateCollection($this->getDatabaseName(), $this->getCollectionName());
   $operation->execute($this->getPrimaryServer());
   $map = new Javascript('function() { emit(this.user_id,1); }');
   $reduce = new Javascript('function(k, vals) { var sum = 0; for (var i in vals) { sum += vals[i]; } return sum; }');
   $out = array("merge" => "eventCounts");

   $sales = new MapReduce($this->getDatabaseName(), $this->getCollectionName(), $map, $reduce, $out);
   $sales->execute($this->getPrimaryServer());

This will create a MapReduceResult.

See Also
--------

- :manual:`mapReduce </reference/command/mapReduce>` command reference in the MongoDB
  manual
- :manual:`Map-Reduce </core/map-reduce>` documentation in the MongoDB manual

